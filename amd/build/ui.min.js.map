{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin tiny_cloze for TinyMCE v6 in Moodle.\n *\n * @module      tiny_cloze/ui\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport Modal from 'core/modal';\nimport ModalFactory from 'core/modal_factory';\nimport Mustache from 'core/mustache';\nimport {get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport {hasQtypeMultianswerrgx} from './options';\nimport {\n  CSS, TEMPLATE,\n  markerClass, markerSpan,\n  isNull, strdecode, strencode, indexOfNode,\n  getUuid, getFractionOptions, getQuestionTypes,\n  hasInvalidChars, isCustomGrade, setStr,\n  selectCustomPercent\n} from './cloze';\n\n// Language strings used in the modal dialogue.\nconst STR = {};\n\n/**\n * The editor instance that is injected via the onInit() function.\n *\n * @type {tinymce.Editor}\n * @private\n */\nlet _editor = null;\n\n/**\n * A reference to the currently open form.\n *\n * @param _form\n * @type {Node}\n * @private\n */\nlet _form = null;\n\n/**\n * An array containing the current answers options\n *\n * @param _answerdata\n * @type {Array}\n * @private\n */\nlet _answerdata = [];\n\n/**\n * The sub question type to be edited\n *\n * @param _qtype\n * @type {string|null}\n * @private\n */\nlet _qtype = null;\n\n/**\n * Remember the pos of the selected node.\n * @type {number}\n * @private\n */\nlet _selectedOffset = -1;\n\n/**\n * The maximum marks for the sub question\n *\n * @param _marks\n * @type {Integer}\n * @private\n */\nlet _marks = 1;\n\n/**\n * The modal dialogue to be displayed when designing the cloze question types.\n * @type {Modal|null}\n */\nlet _modal = null;\n\n/**\n * If its a normal selection of text, use it for the first answer field.\n * @type {string|null}\n */\nlet _firstAnswer = null;\n\n/**\n * When selecting a text portion that is used for the first answer field, remember\n * any whitespace before and after the selection.\n * 0 => no whitespace, 1 => whitespace before, 2 => whitespace after, 3 => whitespace before and after.\n * @type {int}\n */\nlet _selectedPrefixAndSuffix = 0;\n\n/**\n * Inject the editor instance and add markers to the cloze question texts.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n  _editor = ed; // The current editor instance.\n  // Add the marker spans.\n  _addMarkers();\n  // And get the language strings.\n  _getStr();\n};\n\n/**\n * Regex to recognize the question string in the text e.g. {1:NUMERICAL:...} or {:MULTICHOICE:...}\n * @param {tinymce.Editor} editor\n * @return {RegExp}\n * @private\n */\nconst _getRegexQtype = (editor) => {\n  // eslint-disable-next-line max-len\n  const baseQtypes = 'MULTICHOICE(_H|_V|_S|_HS|_VS)?|MULTIRESPONSE(_H|_S|_HS)?|NUMERICAL|SHORTANSWER(_C)?|SAC?|NM|MWC?|M[CR](V|H|VS|HS)?';\n  const extQtypes = hasQtypeMultianswerrgx(editor) ? '|REGEXP(_C)?|RXC?' : '';\n  return new RegExp('\\\\{([0-9]*):(' + baseQtypes + extQtypes + '):(.*?)(?<!\\\\\\\\)\\\\}', 'g');\n};\n\n/**\n * Load strings for the modal dialogue from the language packs.\n * @private\n */\nconst _getStr = async() => {\n  let strToFetch = [\n    {key: 'answer', component: 'question'},\n    {key: 'chooseqtypetoadd', component: 'question'},\n    {key: 'defaultmark', component: 'question'},\n    {key: 'feedback', component: 'question'},\n    {key: 'correct', component: 'question'},\n    {key: 'incorrect', component: 'question'},\n    {key: 'addmoreanswerblanks', component: 'qtype_calculated'},\n    {key: 'delete', component: 'core'},\n    {key: 'up', component: 'core'},\n    {key: 'down', component: 'core'},\n    {key: 'tolerance', component: 'qtype_calculated'},\n    {key: 'gradenoun', component: 'core'},\n    {key: 'caseno', component: 'mod_quiz'},\n    {key: 'caseyes', component: 'mod_quiz'},\n    {key: 'answersingleno', component: 'qtype_multichoice'},\n    {key: 'answersingleyes', component: 'qtype_multichoice'},\n    {key: 'layoutselectinline', component: 'qtype_multianswer'},\n    {key: 'layouthorizontal', component: 'qtype_multianswer'},\n    {key: 'layoutvertical', component: 'qtype_multianswer'},\n    {key: 'shufflewithin', component: 'mod_quiz'},\n    {key: 'layoutmultiple_horizontal', component: 'qtype_multianswer'},\n    {key: 'layoutmultiple_vertical', component: 'qtype_multianswer'},\n    {key: 'pluginnamesummary', component: 'qtype_multichoice'},\n    {key: 'pluginnamesummary', component: 'qtype_shortanswer'},\n    {key: 'pluginnamesummary', component: 'qtype_numerical'},\n    {key: 'multichoice', component},\n    {key: 'multiresponse', component},\n    {key: 'numerical', component: 'mod_quiz'},\n    {key: 'shortanswer', component: 'mod_quiz'},\n    {key: 'cancel', component: 'core'},\n    {key: 'select', component},\n    {key: 'insert', component},\n    {key: 'pluginname', component},\n    {key: 'customgrade', component},\n    {key: 'err_custom_rate', component},\n    {key: 'err_empty_answer', component},\n    {key: 'err_none_correct', component},\n    {key: 'err_not_numeric', component},\n    {key: 'err_invalid_chars', component},\n  ];\n  let langKeys = [\n    'answer',\n    'chooseqtypetoadd',\n    'defaultmark',\n    'feedback',\n    'correct',\n    'incorrect',\n    'addmoreanswerblanks',\n    'delete',\n    'up',\n    'down',\n    'tolerance',\n    'grade',\n    'caseno',\n    'caseyes',\n    'singleno',\n    'singleyes',\n    'selectinline',\n    'horizontal',\n    'vertical',\n    'shuffle',\n    'multi_horizontal',\n    'multi_vertical',\n    'summary_multichoice',\n    'summary_shortanswer',\n    'summary_numerical',\n    'multichoice',\n    'multiresponse',\n    'numerical',\n    'shortanswer',\n    'btn_cancel',\n    'btn_select',\n    'btn_insert',\n    'title',\n    'custom_grade',\n    'err_custom_rate',\n    'err_empty_answer',\n    'err_none_correct',\n    'err_not_numeric',\n    'err_invalid_chars',\n  ];\n  if (hasQtypeMultianswerrgx(_editor)) {\n    strToFetch.push({key: 'regexp', component: 'qtype_regexp'});\n    strToFetch.push({key: 'pluginnamesummary', component: 'qtype_regexp'});\n    langKeys.push('regexp');\n    langKeys.push('summary_regexp');\n  }\n  getStrings(strToFetch).then(function() {\n    const args = Array.from(arguments);\n    langKeys.map((l, i) => {\n      setStr(l, args[0][i]);\n      STR[l] = args[0][i];\n      return ''; // Make the linter happy.\n    });\n    return ''; // Make the linter happy.\n  }).catch(() => {\n    return '';\n  });\n};\n\n/**\n * Create the modal.\n * @return {Promise<void>}\n * @private\n */\nconst _createModal = async function() {\n  // Create the modal dialogue. Depending on whether we have a selected node or not, the content is different.\n  const cfg = {\n    title: STR.title,\n    templateContext: {\n      elementid: _editor.id\n    },\n    removeOnClose: true,\n    large: true,\n  };\n  if (typeof Modal.create === 'function') {\n    _modal = await Modal.create(cfg);\n  } else {\n    _modal = await ModalFactory.create(cfg);\n  }\n};\n\n/**\n * Display modal dialogue to edit a cloze question. Either a form is displayed to edit subquestion or a list\n * of possible questions is show.\n *\n * @method displayDialogue\n * @public\n */\nconst displayDialogue = async function() {\n  await _createModal();\n\n  // Resolve whether cursor is in a subquestion.\n  const subquestion = resolveSubquestion();\n  if (subquestion) {\n    _firstAnswer = null;\n    // Subquestion found, remember which node of the marker nodes is selected.\n    _selectedOffset = indexOfNode(_editor.dom.select('.' + markerClass), subquestion);\n    _parseSubquestion(subquestion.innerHTML);\n    _setDialogueContent(_qtype);\n  } else {\n    // No subquestion found, no offset to remember.\n    _selectedOffset = -1;\n    _firstAnswer = _editor.selection.getContent();\n    _selectedPrefixAndSuffix = 0;\n    if (_firstAnswer[0] === ' ') {\n      _selectedPrefixAndSuffix = 1;\n    }\n    if (_firstAnswer[_firstAnswer.length - 1] === ' ') {\n      _selectedPrefixAndSuffix += 2;\n    }\n    _firstAnswer = _firstAnswer.trim();\n    _setDialogueContent();\n  }\n};\n\n/**\n * On double click, check that we are on a question and display the dialogue with the question to edit.\n * @method displayDialogueForEdit\n * @param {Node} target\n * @public\n */\nconst displayDialogueForEdit = async function(target) {\n\n  const subquestion = resolveSubquestion(target);\n  if (!subquestion) {\n    return;\n  }\n  await _createModal();\n  _selectedOffset = indexOfNode(_editor.dom.select('.' + markerClass), subquestion);\n  _parseSubquestion(subquestion.innerHTML);\n  _setDialogueContent(_qtype);\n};\n\n/**\n * Search for cloze questions based on a regular expression. All the matching snippets at least contain the cloze\n * question definition. Although Moodle does not support encapsulated other functions within curly brackets, we\n * still try to find the correct closing bracket. The so extracted cloze question is surrounded by a marker span\n * element, that contains attributes so that the content inside the span cannot be modified by the editor (in the\n * textarea). Also, this makes it a lot easier to select the question, edit it in the dialogue and replace the result\n * in the existing text area.\n *\n * @method _addMarkers\n * @private\n */\nconst _addMarkers = function() {\n\n  let content = _editor.getContent();\n  let newContent = '';\n\n  // Check if there is already a marker span. In this case we do not have to do anything.\n  if (content.indexOf(markerClass) !== -1) {\n    return;\n  }\n\n  let m;\n  do {\n    m = content.match((_getRegexQtype(_editor)));\n    if (!m) { // No match of a cloze question, then we are done.\n      newContent += content;\n      break;\n    }\n    // Copy the current match to the new string preceded with the <span>.\n    const pos = content.indexOf(m[0]);\n    newContent += content.substring(0, pos) + markerSpan + content.substring(pos, pos + m[0].length);\n    content = content.substring(pos + m[0].length);\n\n    // Count the { in the string, should be just one (the very first one at position 0).\n    let level = (m[0].match(/\\{/g) || []).length;\n    if (level === 1) {\n      // If that's the case, we close the span and the cloze question text is the innerHTML of that marker span.\n      newContent += '</span>';\n      continue; // Look for the next matching cloze question.\n    }\n    // If there are more { than } in the string, then we did not find the corresponding } that belongs to the cloze string.\n    while (level > 1) {\n      const a = content.indexOf('{');\n      const b = content.indexOf('}');\n      if (a > -1 && b > -1 && a < b) { // The { is before another } so remember to find as many } until we back at level 1.\n        level++;\n        newContent = content.substring(0, a);\n        content = content.substring(a + 1);\n      } else if (b > -1) { // We found a closing } to a previously {.\n        newContent = content.substring(0, b);\n        content = content.substring(b + 1);\n        level--;\n      } else {\n        level = 1; // Should not happen, just to stop the endless loop.\n      }\n    }\n    newContent += '</span>';\n  } while (m);\n  _editor.setContent(newContent);\n};\n\n/**\n * Look for the marker span elements around a cloze question and remove that span. Also, the marker for a new\n * node to be inserted would be removed here as well.\n */\nconst _removeMarkers = function() {\n  for (const span of _editor.dom.select('span.' + markerClass)) {\n    _editor.dom.setOuterHTML(span, span.classList.contains('new') ? '' : span.innerHTML);\n  }\n};\n\n/**\n * When the source code view dialogue is show, we must remove the spans around the cloze question strings\n * from the editor content and add them again when the dialogue is closed.\n * Since this event is also triggered when the editor data is saved, we use this function to remove the\n * highlighting content at that time.\n *\n * @method onBeforeGetContent\n * @param {object} content\n * @public\n */\nconst onBeforeGetContent = function(content) {\n  if (!isNull(content.source_view) && content.source_view === true) {\n    // If the user clicks on 'Cancel' or the close button on the html\n    // source code dialog view, make sure we re-add the visual styling.\n    var onClose = function() {\n      _editor.off('close', onClose);\n      _addMarkers();\n    };\n    _editor.on('CloseWindow', () => {\n      onClose();\n    });\n    // Remove markers only if modal is not called, otherwise we will lose our new question marker.\n    if (!_modal) {\n      _removeMarkers();\n    }\n  }\n};\n\n/**\n * Fires when the form containing the editor is submitted.\n *\n * @method onSubmit\n * @public\n */\nconst onSubmit = function() {\n  _removeMarkers();\n};\n\n/**\n * Set the dialogue content for the tool, attaching any required events. Either the modal dialogue displays\n * a list of the question types for the form for a particular question to edit. The set content is also\n * called when the form has changed (up or down move, deletion and adding a response). We must be aware of that\n * an event to the dialogue buttons must be attached once only. Therefore, when the form content is modified, only\n * the form events for the answers are set again, the general events are nor (nomodalevents is true then).\n *\n * @method _setDialogueContent\n * @param {String} qtype The question type to be used\n * @param {boolean} nomodalevents Optional do not attach events.\n * @private\n */\nconst _setDialogueContent = function(qtype, nomodalevents) {\n  const footer = Mustache.render(TEMPLATE.FOOTER, {\n    cancel: STR.btn_cancel,\n    submit: !qtype ? STR.btn_select : STR.btn_insert,\n  });\n  let contentText;\n  if (!qtype) {\n    contentText = Mustache.render(TEMPLATE.TYPE, {\n      CSS: CSS,\n      STR: STR,\n      qtype: _qtype,\n      types: getQuestionTypes(hasQtypeMultianswerrgx(_editor))\n    });\n  } else {\n    contentText = Mustache.render(TEMPLATE.FORM, {\n      CSS: CSS,\n      STR: STR,\n      SRC: {\n        ADD: M.util.image_url('t/add', 'core'),\n        DEL: M.util.image_url('t/delete', 'core'),\n        UP: M.util.image_url('t/up', 'core'),\n        DOWN: M.util.image_url('t/down', 'core'),\n      },\n      answerdata: _answerdata,\n      elementid: getUuid(),\n      qtype: _qtype,\n      name: getQuestionTypes(hasQtypeMultianswerrgx(_editor)).filter(q => _qtype === q.type)[0].name,\n      marks: _marks,\n      numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n    });\n  }\n  _modal.setBody(contentText);\n  _modal.setFooter(footer);\n  _modal.show();\n  const $root = _modal.getRoot();\n  _form = $root.get(0).querySelector('form');\n  _toggleDeleteIcon();\n\n  if (!nomodalevents) {\n    _modal.registerEventListeners();\n    _modal.registerCloseOnSave();\n    _modal.registerCloseOnCancel();\n    $root.on(ModalEvents.cancel, _cancel);\n\n    if (!qtype) { // For the question list we need the choice handler only, and we are done.\n      $root.on(ModalEvents.save, _choiceHandler);\n      return;\n    } // Handler to add the question string to the editor content.\n    $root.on(ModalEvents.save, _setSubquestion);\n  }\n  // The form needs events for the icons to move up/down, add or delete a response.\n  const getTarget = e => {\n    let p = e.target;\n    while (!isNull(p) && p.nodeType === 1 && p.tagName !== 'A') {\n      p = p.parentNode;\n    }\n    if (isNull(p.classList)) {\n      return null;\n    }\n    return p;\n  };\n\n  _form.addEventListener('click', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.DELETE)) {\n      e.preventDefault();\n      _deleteAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.ADD)) {\n      e.preventDefault();\n      _addAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.LOWER)) {\n      e.preventDefault();\n      _lowerAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.RAISE)) {\n      e.preventDefault();\n      _raiseAnswer(p);\n    }\n  });\n  _form.addEventListener('keyup', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.ANSWER) || p.classList.contains(CSS.FEEDBACK)) {\n      e.preventDefault();\n      _addAnswer(p);\n    }\n  });\n  _form.querySelectorAll('.' + CSS.FRACTION).forEach((sel) => {\n    sel.addEventListener('change', e => {\n      const id = e.target.getAttribute('id');\n      if (e.target.value === selectCustomPercent) {\n        document.getElementById(id + '_custom').parentNode.classList.remove('hidden');\n      } else {\n        document.getElementById(id + '_custom').parentNode.classList.add('hidden');\n      }\n    });\n  });\n};\n\n/**\n * If there is one answer field, hide the delete icon. Otherwise show them\n * all to allow deletion of any answer.\n *\n * @private\n */\nconst _toggleDeleteIcon = function() {\n  const deleteIcons = _form.querySelectorAll('.' + CSS.DELETE);\n  if (deleteIcons.length === 1) {\n    deleteIcons[0].classList.add('hidden');\n    return;\n  }\n  for (let i = 0; i < deleteIcons.length; i++) {\n    deleteIcons[i].classList.remove('hidden');\n  }\n};\n\n/**\n * Handle question choice.\n *\n * @method _choiceHandler\n * @private\n * @param {Event} e Event from button click in chooser\n */\nconst _choiceHandler = function(e) {\n  e.preventDefault();\n  let qtype = _form.querySelector('input[name=qtype]:checked');\n  if (qtype) {\n    _qtype = qtype.value;\n  }\n  // For numerical and short answer questions (and when installed regexp) we offer one response field only.\n  // All other question types have three empty response fields.\n  const max = (_qtype.indexOf('SHORTANSWER') !== -1 || _qtype === 'NUMERICAL' || _qtype.indexOf('REGEXP') !== -1) ? 1 : 3;\n  const blankAnswer = {\n    id: getUuid(),\n    answer: '',\n    feedback: '',\n    fraction: 100,\n    fractionOptions: getFractionOptions(''),\n    tolerance: 0,\n    isCustomGrade: false,\n  };\n  _answerdata = [];\n  for (let x = 0; x < max; x++) {\n    _answerdata.push({...blankAnswer, id: getUuid()});\n  }\n  // The first response field gets the default grade correct.\n  _answerdata[0].fractionOptions = getFractionOptions('=');\n  // In case the user seleced some text, this is used as the first answer.\n  if (_firstAnswer) {\n    _answerdata[0].answer = _firstAnswer;\n  }\n  _modal.destroy();\n  // Our choice is stored in _qtype. We need to create the modal dialogue with the form now.\n  _createModal().then(() => {\n    _setDialogueContent(_qtype);\n    _form.querySelector('.' + CSS.ANSWER).focus();\n    return ''; // Make the linter happy.\n  }).catch(() => {\n      return '';\n  });\n};\n\n/**\n * Parse question and set properties found.\n *\n * @method _parseSubquestion\n * @private\n * @param {String} question The question string\n */\nconst _parseSubquestion = function(question) {\n  _answerdata = []; // Flush answers to have an empty dialogue if something goes wrong parsing the question string.\n  const regexQtype = _getRegexQtype(_editor);\n  const parts = regexQtype.exec(question);\n  regexQtype.lastIndex = 0; // Reset lastIndex so that the next match starts from the beginning of the question string.\n  if (!parts) {\n    return;\n  }\n  _marks = parts[1];\n  _qtype = parts[2];\n  // Convert the short notation to the long form e.g. SA to SHORTANSWER.\n  if (_qtype.length < 5) {\n    getQuestionTypes(hasQtypeMultianswerrgx(_editor)).forEach(l => {\n      for (const a of l.abbr) {\n        if (a === _qtype) {\n          _qtype = l.type;\n          return;\n        }\n      }\n    });\n  }\n  // Depending on the regex the position of the answers is different.\n  const answers = parts[hasQtypeMultianswerrgx(_editor) ? 8 : 7].match(/(\\\\.|[^~])*/g);\n  if (!answers) {\n    return;\n  }\n  answers.forEach(function(answer) {\n    const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n    if (options && options[4]) {\n      let frac = '';\n      if (options[3]) {\n        frac = options[3] === '=' ? '=' : 100;\n      } else if (options[2]) {\n        frac = options[2];\n      }\n      if (_qtype === 'NUMERICAL' || _qtype === 'NM') {\n        const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n        _answerdata.push({\n          id: getUuid(),\n          answer: strdecode(options[4].replace(/:.*/, '')),\n          feedback: strdecode(options[6]),\n          tolerance: tolerance,\n          fraction: frac,\n          fractionOptions: getFractionOptions(frac),\n          isCustomGrade: isCustomGrade(frac),\n        });\n        return;\n      }\n      _answerdata.push({\n        answer: strdecode(options[4]),\n        id: getUuid(),\n        feedback: strdecode(options[6]),\n        fraction: frac,\n        fractionOptions: getFractionOptions(frac),\n        isCustomGrade: isCustomGrade(frac),\n      });\n    }\n  });\n};\n\n/**\n * Insert a new set of answer blanks below the button.\n *\n * @method _addAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _addAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.ADD), a);\n  if (index === -1) {\n    index = 0;\n  }\n  let fraction = '';\n  let answer = '';\n  let feedback = '';\n  let tolerance = 0;\n  if (a.closest('li')) {\n    fraction = a.closest('li').querySelector('.' + CSS.FRACTION).value;\n    if (fraction === selectCustomPercent) {\n      fraction = a.closest('li').querySelector('.' + CSS.FRAC_CUSTOM).value;\n    }\n    answer = a.closest('li').querySelector('.' + CSS.ANSWER).value;\n    feedback = a.closest('li').querySelector('.' + CSS.FEEDBACK).value;\n    if (a.closest('li').querySelector('.' + CSS.TOLERANCE)) {\n      tolerance = a.closest('li').querySelector('.' + CSS.TOLERANCE).value;\n    }\n  }\n  _processFormData();\n  _answerdata.splice(index, 0, {\n    id: getUuid(),\n    answer: answer,\n    feedback: feedback,\n    fraction: fraction,\n    fractionOptions: getFractionOptions(fraction),\n    tolerance: tolerance,\n    isCustomGrade: isCustomGrade(fraction)\n  });\n  _setDialogueContent(_qtype, true);\n  _toggleDeleteIcon();\n  _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n};\n\n/**\n * Delete set of answer next to the button.\n *\n * @method _deleteAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _deleteAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.DELETE), a);\n  if (index === -1) {\n    index = indexOfNode(_form.querySelectorAll('li'), a.closest('li'));\n  }\n  _processFormData();\n  _answerdata.splice(index, 1);\n  _setDialogueContent(_qtype, true);\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  index = Math.min(index, answers.length - 1);\n  answers.item(index).focus();\n  _toggleDeleteIcon();\n};\n\n/**\n * Lower answer option\n *\n * @method _lowerAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _lowerAnswer = function(a) {\n  const li = a.closest('li');\n  li.before(li.nextSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Raise answer option\n *\n * @method _raiseAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _raiseAnswer = function(a) {\n  const li = a.closest('li');\n  li.after(li.previousSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Reset and hide form.\n *\n * @method _cancel\n * @param {Event} e Event from button click\n * @private\n */\nconst _cancel = function(e) {\n  e.preventDefault();\n  // In case there is a marker where the new question should be inserted in the text it needs to be removed.\n  for (const span of _editor.dom.select('.' + markerClass + '.new')) {\n    span.remove();\n  }\n  _modal.destroy();\n  _editor.focus();\n  _modal = null;\n};\n\n/**\n * Insert question string into editor content and reset and hide form. If the form contains an error\n * nothing happens.\n *\n * @method _setSubquestion\n * @param {Event} e Event from button click\n * @private\n */\nconst _setSubquestion = function(e) {\n  e.preventDefault();\n  // Check if there are any errors and if so, fill the error container with the\n  // messages and return without going any further and closing the dialogue.\n  const errMsg = _form.querySelector('.msg-error');\n  const formErrors = _processFormData(true);\n  if (formErrors.length > 0) {\n    errMsg.innerHTML = '<ul><li>' + formErrors.join('</li><li>') + '</li></ul>';\n    errMsg.classList.remove('hidden');\n    return;\n  } else {\n    errMsg.classList.add('hidden');\n  }\n  // Build the parser function from the data, that is going to be placed into the editor content.\n  let question = '{' + _marks + ':' + _qtype + ':';\n\n  // Filter all empty responses\n  for (let i = 0; i < _answerdata.length; i++) {\n    if (_answerdata[i].raw === '') {\n      continue;\n    }\n    question += _answerdata[i].fraction && !isNaN(_answerdata[i].fraction)\n      ? '%' + _answerdata[i].fraction + '%' : _answerdata[i].fraction;\n    question += strencode(_answerdata[i].answer);\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      question += ':' + _answerdata[i].tolerance;\n    }\n    if (_answerdata[i].feedback) {\n      question += '#' + strencode(_answerdata[i].feedback);\n    }\n    if (i < _answerdata.length - 1) {\n      question += '~';\n    }\n  }\n  if (question.slice(-1) === '~') {\n    question = question.substring(0, question.length - 1);\n  }\n  question += '}';\n  // eslint-disable-next-line no-bitwise\n  if (_selectedPrefixAndSuffix & 1) {\n    question = ' ' + question;\n  }\n  // eslint-disable-next-line no-bitwise\n  if (_selectedPrefixAndSuffix & 2) {\n    question += ' ';\n  }\n\n  _modal.destroy();\n  _modal = null;\n  _editor.focus();\n  if (_selectedOffset > -1) { // We have to replace one of the marker spans (the innerHTML contains the question string).\n    _editor.dom.select('.' + markerClass)[_selectedOffset].innerHTML = question;\n  } else {\n    // Just add the question text with markup.\n    _editor.insertContent(markerSpan + question + '</span>');\n  }\n};\n\n/**\n * Read the form data, process it and store the result in the internal _answerdata array.\n * Also, if validation is enabled, the fields are checked for invalid values e.g.\n * - answer field is empty (if a correct answer is contained, empty fields are eliminated).\n * - custom_grade field whenin use and does not contain a number.\n * - no field is marked as a correct answer.\n * - tolerance field must be in percentage of min -100 and max 100.\n * Any field with an error is maked and the first field containing an error gets the focus.\n *\n * @method _processFormData\n * @param {boolean} validate\n * @return {Array}\n * @private\n */\nconst _processFormData = function(validate) {\n  _answerdata = [];\n  let globalErrors = [];\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n  const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n  const customGrades = _form.querySelectorAll('.' + CSS.FRAC_CUSTOM);\n  const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n  // Remove any error classes.\n  for (let i = 0; i < answers.length; i++) {\n    answers.item(i).classList.remove('error');\n    customGrades.item(i).classList.remove('error');\n    const currentAnswer = {\n      raw: answers.item(i).value.trim(),\n      answer: answers.item(i).value.trim(),\n      id: getUuid(),\n      feedback: feedbacks.item(i).value,\n      fraction: fractions.item(i).value === selectCustomPercent ? customGrades.item(i).value : fractions.item(i).value,\n      fractionOptions: getFractionOptions(fractions.item(i).value),\n      tolerance: tolerances.length > 0 ? tolerances.item(i).value : 0,\n      isCustomGrade: fractions.item(i).value === selectCustomPercent\n    };\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      tolerances.item(i).classList.remove('error');\n      // In numeric questions convert answer and tolerance to numeric values (this filters non numeric values).\n      currentAnswer.answer = Number(currentAnswer.answer);\n      currentAnswer.tolerance = Number(currentAnswer.tolerance);\n    }\n    _answerdata.push(currentAnswer);\n  }\n  _marks = _form.querySelector('.' + CSS.MARKS).value;\n\n  if (validate) {\n    const {hasCorrectAnswer, errors} = _validateAnswers();\n    for (let i = 0; i < _answerdata.length; i++) {\n      for (const err of _answerdata[i].hasErrors) {\n        // Automatically remove empty answer fields for convenience if there is at least one correct answer.\n        if (hasCorrectAnswer && (err === 'empty_answer' || err === 'correct_but_empty')) {\n          break;\n        }\n        if (err === 'answer_not_numeric' || err === 'empty_answer'\n          || err === 'correct_but_empty' || err === 'answer_invalid_chars'\n        ) {\n          answers.item(i).classList.add('error');\n        } else if (err === 'tolerance_not_numeric') {\n          tolerances.item(i).classList.add('error');\n        } else if (err === 'error_custom_rate') {\n          customGrades.item(i).classList.add('error');\n        }\n      }\n    }\n    globalErrors = _translateGlobalErrors(hasCorrectAnswer, errors);\n    // If we have errors, we focus the first field that contains an error.\n    if (globalErrors.length > 0) {\n      _form.querySelector('input.error').focus();\n    }\n  }\n  return globalErrors;\n};\n\n/**\n * Validates the answer array. Checks for each question if the data from the form is\n * incomplete or has other errors. These are flagged accordingly in the array element.\n * The retruned object contains the properties:\n * - hasCorrectAnswer {boolean} is true if there is at least one correct answer.\n * - errors {Array} list of strings that contain an error code that is globaly used for error messages.\n *\n * @return {Array}\n * @private\n */\nconst _validateAnswers = function() {\n  let errors = [];\n  let hasCorrect = false;\n  for (let i = 0; i < _answerdata.length; i++) {\n    _answerdata[i].hasErrors = [];\n    // Check if we have an empty answer string.\n    if (_answerdata[i].raw === '') {\n      _answerdata[i].hasErrors.push('empty_answer');\n    }\n    // When there are numeric questions, check that the answer and tolerance is a valid number.\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      if (isNaN(_answerdata[i].answer) && _answerdata[i].raw !== '') {\n        _answerdata[i].hasErrors.push('answer_not_numeric');\n      }\n      if (isNaN(_answerdata[i].tolerance)) {\n        _answerdata[i].hasErrors.push('tolerance_not_numeric');\n      }\n    }\n    // Regex answers can use the . ^ $ * + { } \\ / as a literal only (preceeded by a backslash).\n    if ((_qtype === 'REGEXP' || _qtype === 'REGEXP_C') && hasInvalidChars(_answerdata[i].raw)) {\n      _answerdata[i].hasErrors.push('answer_invalid_chars');\n    }\n    // Check the custom grade, that must be a percentage number between -100 and 100.\n    if (_answerdata[i].isCustomGrade &&\n      (isNaN(_answerdata[i].fraction) || _answerdata[i].fraction < -100 || _answerdata[i].fraction > 100\n        || _answerdata[i].fraction.trim() === '')\n    ) {\n      _answerdata[i].hasErrors.push('error_custom_rate');\n    }\n    // We found a correct answer, when grade is marked as 100 or \"=\" and the answer is not empty.\n    if (_answerdata[i].fraction === '100' || _answerdata[i].fraction === '=') {\n      if (_answerdata[i].raw !== '') {\n        _answerdata[i].isCorrect = true;\n        hasCorrect = true;\n      } else {\n        _answerdata[i].hasErrors.push('correct_but_empty');\n      }\n    }\n    errors = errors.concat(_answerdata[i].hasErrors);\n  }\n\n  return {\n    hasCorrectAnswer: hasCorrect,\n    errors: _combineGlobalErrors(hasCorrect, errors),\n  };\n};\n\n/**\n * Translate the errors into a readable string for a list that is used on top of the\n * input fields, to indicate what part of the data is incorrect.\n *\n * @param {Boolean} hasCorrectAnswer\n * @param {Array} errors\n * @return {Array}\n * @private\n */\nconst _translateGlobalErrors = function(hasCorrectAnswer, errors) {\n  const errTranslated = [];\n  // Translate the error strings into a string that can be displayed in the form.\n  const trMsg = {\n    emptyanswer: STR.err_empty_answer,\n    answernotnumeric: STR.err_not_numeric,\n    tolerancenotnumeric: STR.err_not_numeric,\n    errorcustomrate: STR.err_custom_rate,\n    nonecorrect: STR.err_none_correct,\n    answerinvalidchars: STR.err_invalid_chars,\n  };\n  for (const err of errors) {\n    // If there's at least one correct answer, we filter out all empty answers and therefore do not\n    // show the error message.\n    if (hasCorrectAnswer && err === 'empty_answer' || err === 'correct_but_empty') {\n      continue;\n    }\n    // Remove underscore (we do this only because of the js linter).\n    const key = err.replace(/_/g, '');\n    errTranslated.push(trMsg[key]);\n  }\n  return errTranslated;\n};\n\n/**\n * Combine the error list from the answers to a global list.\n *\n * @param {Boolean} hasCorrectAnswer\n * @param {Array} errors\n * @return {Array}\n * @private\n */\nconst _combineGlobalErrors = function(hasCorrectAnswer, errors) {\n  // Unique errors for the global error list.\n  const errUnique = errors.filter((value, index, array) => array.indexOf(value) === index);\n  // If we have a correct answer, do not show the empty answer error, because empty responses are filtered.\n  if (hasCorrectAnswer) {\n    const i = errUnique.indexOf('empty_answer');\n    if (i > -1) {\n      errUnique.splice(i, 1);\n    }\n  } else if (!errUnique.includes('correct_but_empty')) {\n    errUnique.push('none_correct');\n  }\n  return errUnique;\n};\n\n/**\n * Check whether cursor is in a subquestion and return subquestion text if\n * true.\n *\n * @method resolveSubquestion\n * @param {Node|null} element The element to check if it is a subquestion.\n * @return {Mixed} The selected node of with the subquestion if found, false otherwise.\n */\nconst resolveSubquestion = function(element) {\n  let span = element || _editor.selection.getStart();\n  if (!isNull(span.classList) && span.classList.contains(markerClass)) {\n    return span;\n  }\n  _editor.dom.getParents(span, elm => {\n    // Are we in a span that encapsulates the cloze question?\n    if (!isNull(elm.classList) && elm.classList.contains(markerClass)) {\n      return elm;\n    }\n    return false;\n  });\n  return false;\n};\n\nexport {\n  displayDialogue,\n  displayDialogueForEdit,\n  resolveSubquestion,\n  onInit,\n  onBeforeGetContent,\n  onSubmit,\n};\n"],"names":["STR","_editor","_form","_answerdata","_qtype","_selectedOffset","_marks","_modal","_firstAnswer","_selectedPrefixAndSuffix","ed","_addMarkers","_getStr","_getRegexQtype","editor","extQtypes","RegExp","async","strToFetch","key","component","langKeys","push","then","args","Array","from","arguments","map","l","i","catch","_createModal","cfg","title","templateContext","elementid","id","removeOnClose","large","Modal","create","ModalFactory","subquestion","resolveSubquestion","dom","select","markerClass","_parseSubquestion","innerHTML","_setDialogueContent","selection","getContent","length","trim","target","m","content","newContent","indexOf","match","pos","substring","markerSpan","level","a","b","setContent","_removeMarkers","span","setOuterHTML","classList","contains","source_view","onClose","off","on","qtype","nomodalevents","footer","Mustache","render","TEMPLATE","FOOTER","cancel","btn_cancel","submit","btn_insert","btn_select","contentText","FORM","CSS","SRC","ADD","M","util","image_url","DEL","UP","DOWN","answerdata","name","filter","q","type","marks","numerical","TYPE","types","setBody","setFooter","show","$root","getRoot","get","querySelector","_toggleDeleteIcon","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","ModalEvents","_cancel","save","_choiceHandler","_setSubquestion","getTarget","e","p","nodeType","tagName","parentNode","addEventListener","DELETE","preventDefault","_deleteAnswer","_addAnswer","LOWER","_lowerAnswer","RAISE","_raiseAnswer","ANSWER","FEEDBACK","querySelectorAll","FRACTION","forEach","sel","getAttribute","value","selectCustomPercent","document","getElementById","remove","add","deleteIcons","max","blankAnswer","answer","feedback","fraction","fractionOptions","tolerance","isCustomGrade","x","destroy","focus","question","regexQtype","parts","exec","lastIndex","abbr","answers","options","frac","replace","index","closest","FRAC_CUSTOM","TOLERANCE","_processFormData","splice","item","Math","min","li","before","nextSibling","after","previousSibling","errMsg","formErrors","join","raw","isNaN","slice","insertContent","validate","globalErrors","feedbacks","fractions","customGrades","tolerances","currentAnswer","Number","MARKS","hasCorrectAnswer","errors","_validateAnswers","err","hasErrors","_translateGlobalErrors","hasCorrect","isCorrect","concat","_combineGlobalErrors","errTranslated","trMsg","emptyanswer","err_empty_answer","answernotnumeric","err_not_numeric","tolerancenotnumeric","errorcustomrate","err_custom_rate","nonecorrect","err_none_correct","answerinvalidchars","err_invalid_chars","errUnique","array","includes","element","getStart","getParents","elm"],"mappings":"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"}